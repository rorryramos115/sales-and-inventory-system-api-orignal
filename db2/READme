-- ===============================================
-- DATABASE
-- ===============================================
CREATE DATABASE grocery_sales_inventory;
USE grocery_sales_inventory;

-- ===============================================
-- USERS & ROLES
-- ===============================================
CREATE TABLE roles (
    role_id CHAR(36) PRIMARY KEY,
    role_name VARCHAR(50) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE users (
    user_id CHAR(36) PRIMARY KEY,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    full_name VARCHAR(100) NOT NULL,
    phone VARCHAR(20),
    role_id CHAR(36) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    must_change_password BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (role_id) REFERENCES roles(role_id)
);

CREATE TABLE assign_warehouse (
    assign_id CHAR(36) PRIMARY KEY,
    user_id CHAR(36) NOT NULL,
    warehouse_id CHAR(36) NOT NULL, 
    assigned_date DATE NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id),
    UNIQUE KEY (user_id, warehouse_id)
);

-- ===============================================
-- WAREHOUSES (Warehouses, Stores, etc.)
-- ===============================================

CREATE TABLE warehouses (
    warehouse_id CHAR(36) PRIMARY KEY,
    warehouse_name VARCHAR(100) NOT NULL,
    address VARCHAR(255),
    is_active BOOLEAN DEFAULT TRUE,
    is_main BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- ===============================================
-- COUNTERS (Store POS terminals)
-- ===============================================
CREATE TABLE counters (
    counter_id CHAR(36) PRIMARY KEY,
    counter_name VARCHAR(50) NOT NULL,
    store_id CHAR(36) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (store_id) REFERENCES warehouses(warehouse_id)
);

-- ===============================================
-- PRODUCTS & CATEGORIES
-- ===============================================
CREATE TABLE categories (
    category_id CHAR(36) PRIMARY KEY,
    category_name VARCHAR(50) UNIQUE NOT NULL,
    description TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE brands (
    brand_id CHAR(36) PRIMARY KEY,
    brand_name VARCHAR(100) NOT NULL UNIQUE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE units (
    unit_id CHAR(36) PRIMARY KEY,
    unit_name VARCHAR(50) NOT NULL UNIQUE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


CREATE TABLE products (
    product_id CHAR(36) PRIMARY KEY,
    product_name VARCHAR(150) NOT NULL,
    category_id CHAR(36) NOT NULL,
    brand_id CHAR(36) NOT NULL,
    unit_id CHAR(36) NOT NULL,
    selling_price DECIMAL(10,2) NOT NULL,
    barcode VARCHAR(100) UNIQUE,
    description TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    reorder_point INT(11) DEFAULT 50,   -- when to reorder
    min_stock_level INT(11) DEFAULT 20, -- safety buffer
    max_stock_level INT(11) DEFAULT 200 -- upper limit
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT fk_product_category FOREIGN KEY (category_id) REFERENCES categories(category_id),
    CONSTRAINT fk_product_brand FOREIGN KEY (brand_id) REFERENCES brands(brand_id),
    CONSTRAINT fk_product_unit FOREIGN KEY (unit_id) REFERENCES units(unit_id)
);

-- Price history
CREATE TABLE product_price_history (
    price_id CHAR(36) PRIMARY KEY,
    product_id CHAR(36) NOT NULL,
    new_price DECIMAL(10,2) NOT NULL,
    changed_by CHAR(36) NOT NULL,
    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    FOREIGN KEY (changed_by) REFERENCES users(user_id)
);

-- ===============================================
-- SUPPLIERS
-- ===============================================
CREATE TABLE suppliers (
    supplier_id CHAR(36) PRIMARY KEY,
    supplier_name VARCHAR(100) NOT NULL UNIQUE,
    contact_person VARCHAR(100),
    phone VARCHAR(20),
    email VARCHAR(100),
    address TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE supplier_products (
    supplier_product_id CHAR(36) PRIMARY KEY,
    supplier_id CHAR(36) NOT NULL,
    product_id CHAR(36) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    UNIQUE KEY (supplier_id, product_id)
);

-- ===============================================
-- STOCK STORAGE
-- ===============================================
CREATE TABLE warehouse_stock (
    stock_id CHAR(36) PRIMARY KEY,
    warehouse_id CHAR(36) NOT NULL,
    product_id CHAR(36) NOT NULL,
    quantity INT NOT NULL DEFAULT 0,
    unit_price DECIMAL(10,2),
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    UNIQUE KEY (warehouse_id, product_id)
);

CREATE TABLE store_stock (
    store_stock_id CHAR(36) PRIMARY KEY,    
    store_id CHAR(36) NOT NULL,
    product_id CHAR(36) NOT NULL,
    quantity INT NOT NULL DEFAULT 0,
    unit_price DECIMAL(10,2),
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (store_id) REFERENCES warehouses(warehouse_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    UNIQUE KEY (store_id, product_id)
);

-- ===============================================
-- STOCK TRANSFERS
-- ===============================================
CREATE TABLE warehouse_stock_transfer (
    transfer_id CHAR(36) PRIMARY KEY,
    from_warehouse_id CHAR(36) NOT NULL,
    to_warehouse_id CHAR(36) NOT NULL,
    status ENUM('pending','approved','in_transit','completed','cancelled') DEFAULT 'pending',
    created_by CHAR(36) NOT NULL,
    requested_date DATE NOT NULL,
    approved_date DATE,
    dispatched_date DATE,
    received_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (from_warehouse_id) REFERENCES warehouses(warehouse_id),
    FOREIGN KEY (to_warehouse_id) REFERENCES warehouses(warehouse_id),
    FOREIGN KEY (created_by) REFERENCES users(user_id)
);

CREATE TABLE warehouse_stock_transfer_items (
    transfer_item_id CHAR(36) PRIMARY KEY,
    transfer_id CHAR(36) NOT NULL,
    product_id CHAR(36) NOT NULL,
    quantity INT NOT NULL,
     unit_price DECIMAL(10,2),
    FOREIGN KEY (transfer_id) REFERENCES warehouse_stock_transfer(transfer_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

CREATE TABLE store_stock_transfer (
    transfer_id CHAR(36) PRIMARY KEY,
    warehouse_id CHAR(36) NOT NULL,
    store_id CHAR(36) NOT NULL,
    status ENUM('pending','approved','in_transit','completed','cancelled') DEFAULT 'pending',
    created_by CHAR(36) NOT NULL,
    requested_date DATE NOT NULL,
    approved_date DATE,
    dispatched_date DATE,
    received_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id),
    FOREIGN KEY (store_id) REFERENCES warehouses(warehouse_id),
    FOREIGN KEY (created_by) REFERENCES users(user_id)
);

CREATE TABLE store_stock_transfer_items (
    transfer_item_id CHAR(36) PRIMARY KEY,
    transfer_id CHAR(36) NOT NULL,
    product_id CHAR(36) NOT NULL,
    quantity INT NOT NULL,
    FOREIGN KEY (transfer_id) REFERENCES store_stock_transfer(transfer_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- ===============================================
-- PURCHASE ORDERS & RECEIVING
-- ===============================================
CREATE TABLE purchase_orders (
    order_id CHAR(36) PRIMARY KEY,
    supplier_id CHAR(36) NOT NULL,
    order_date DATE NOT NULL,
    total_amount DECIMAL(12,2),
    created_by CHAR(36) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id),
    FOREIGN KEY (created_by) REFERENCES users(user_id)
);

CREATE TABLE purchase_order_items (
    order_item_id CHAR(36) PRIMARY KEY,
    order_id CHAR(36) NOT NULL,
    product_id CHAR(36) NOT NULL,
    quantity INT NOT NULL,
    unit_cost DECIMAL(10,2) NOT NULL,
    total_price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES purchase_orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

CREATE TABLE stock_receive (
    receive_id CHAR(36) PRIMARY KEY,
    supplier_receipt VARCHAR(50) UNIQUE NOT NULL,
    order_id CHAR(36),
    receive_date DATE NOT NULL,
    supplier_id CHAR(36) NOT NULL,
    warehouse_id CHAR(36) NOT NULL, 
    received_by CHAR(36) NOT NULL,
    total_amount DECIMAL(12,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (order_id) REFERENCES purchase_orders(order_id),
    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id),
    FOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id),
    FOREIGN KEY (received_by) REFERENCES users(user_id)
);

CREATE TABLE stock_receive_items (
    receive_item_id CHAR(36) PRIMARY KEY,
    receive_id CHAR(36) NOT NULL,
    product_id CHAR(36) NOT NULL,
    quantity_receive INT NOT NULL,
    unit_cost DECIMAL(10,2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (receive_id) REFERENCES stock_receive(receive_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- ===============================================
-- STOCK ADJUSTMENTS
-- ===============================================
CREATE TABLE stock_adjustments (
    adjustment_id CHAR(36) PRIMARY KEY,
    warehouse_id CHAR(36) NOT NULL,
    adjusted_by CHAR(36) NOT NULL,
    adjustment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    reason ENUM('spoilage','shrinkage','manual','consumption') NOT NULL,
    FOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id),
    FOREIGN KEY (adjusted_by) REFERENCES users(user_id)
);

CREATE TABLE stock_adjustment_items (
    adjustment_item_id CHAR(36) PRIMARY KEY,
    adjustment_id CHAR(36) NOT NULL,
    product_id CHAR(36) NOT NULL,
    quantity_change INT NOT NULL,
    FOREIGN KEY (adjustment_id) REFERENCES stock_adjustments(adjustment_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- ===============================================
-- SUPPLIER RETURNS
-- ===============================================
CREATE TABLE supplier_returns (
    return_id CHAR(36) PRIMARY KEY,
    supplier_id CHAR(36) NOT NULL,
    order_id CHAR(36),
    return_date DATE NOT NULL,
    warehouse_id CHAR(36) NOT NULL,
    reason TEXT,
    returned_by CHAR(36) NOT NULL,
    total_amount DECIMAL(10,2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id),
    FOREIGN KEY (order_id) REFERENCES purchase_orders(order_id),
    FOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id),
    FOREIGN KEY (returned_by) REFERENCES users(user_id)
);

CREATE TABLE supplier_return_items (
    return_item_id CHAR(36) PRIMARY KEY,
    return_id CHAR(36) NOT NULL,
    product_id CHAR(36) NOT NULL,
    quantity_return INT NOT NULL,
    unit_cost DECIMAL(10,2) NOT NULL,
    total_cost DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (return_id) REFERENCES supplier_returns(return_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- ===============================================
-- SALES (Store → Customer)
-- ===============================================
CREATE TABLE sales (
    sale_id CHAR(36) PRIMARY KEY,
    sale_code VARCHAR(20) NOT NULL UNIQUE,
    store_id CHAR(36) NOT NULL,
    sale_date DATETIME NOT NULL,
    counter_id CHAR(36) NOT NULL,
    user_id CHAR(36) NOT NULL,
    total_items INT NOT NULL,
    subtotal DECIMAL(12,2) NOT NULL,
    total_amount DECIMAL(12,2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (store_id) REFERENCES warehouses(warehouse_id),
    FOREIGN KEY (counter_id) REFERENCES counters(counter_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE sales_items (
    sale_item_id CHAR(36) PRIMARY KEY,
    sale_id CHAR(36) NOT NULL,
    product_id CHAR(36) NOT NULL,
    quantity INT NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL,
    total_price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (sale_id) REFERENCES sales(sale_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

CREATE TABLE receipts (
    receipt_id CHAR(36) PRIMARY KEY,
    receipt_number VARCHAR(20) NOT NULL UNIQUE,
    sale_id CHAR(36) NOT NULL,
    receipt_date DATETIME NOT NULL,
    amount DECIMAL(12,2) NOT NULL,
    created_by CHAR(36) NOT NULL,
    FOREIGN KEY (sale_id) REFERENCES sales(sale_id),
    FOREIGN KEY (created_by) REFERENCES users(user_id)
);

-- ===============================================
-- SALES RETURNS
-- ===============================================
CREATE TABLE sales_returns (
    return_id CHAR(36) PRIMARY KEY,
    receipt_id CHAR(36),
    original_sale_id CHAR(36) NOT NULL,
    return_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    counter_id CHAR(36) NOT NULL,
    user_id CHAR(36) NOT NULL,
    warehouse_id CHAR(36) NOT NULL,
    total_items INT NOT NULL,
    total_amount DECIMAL(12,2) NOT NULL,
    reason TEXT,
    FOREIGN KEY (receipt_id) REFERENCES receipts(receipt_id),
    FOREIGN KEY (original_sale_id) REFERENCES sales(sale_id),
    FOREIGN KEY (counter_id) REFERENCES counters(counter_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)
);

CREATE TABLE sales_return_items (
    return_item_id CHAR(36) PRIMARY KEY,
    return_id CHAR(36) NOT NULL,
    product_id CHAR(36) NOT NULL,
    sale_item_id CHAR(36) NOT NULL,
    quantity INT NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL,
    total_price DECIMAL(10,2) NOT NULL,
    condition ENUM('new','opened','damaged') DEFAULT 'new',
    notes TEXT,
    FOREIGN KEY (return_id) REFERENCES sales_returns(return_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    FOREIGN KEY (sale_item_id) REFERENCES sales_items(sale_item_id)
);
